# Copyright (c) 2020 Intel Corporation.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: '3.6'

services:

  ##----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  ## Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
        EIS_VERSION: ${EIS_VERSION}
        HOST_TIME_ZONE: ${HOST_TIME_ZONE}
        GO_VERSION: ${GO_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}
    ipc: "none"

  ## Define ia_common service
  ia_common:
    depends_on:
    - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
        EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        RUN_TESTS: "OFF"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}
    ipc: "none"

  ##----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

## Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    depends_on:
    - ia_common
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_VERSION: ${ETCD_VERSION}
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    environment:
      AppName: "EtcdUI"
      DEV_MODE: ${DEV_MODE}
      NGINX_PORT: 7071
      CertType: "pem"
      no_proxy: ${eis_no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
    volumes:
    - "vol_etcd_keeper:/tmp/nginx"
    user: ${EIS_UID}
    ipc: "none"
    # secrets:
    # - ca_etcd
    # - etcd_EtcdUI_cert
    # - etcd_EtcdUI_key
    # - etcd_etcduser_cert
    # - etcd_etcduser_key


## uwc_common image
  uwc_common:
    depends_on:
    - ia_eisbase
    build:
      context: $PWD/../uwc/uwc_common
      dockerfile: $PWD/../uwc/uwc_common/Dockerfile.common
      args:
        EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}uwc_common:${EIS_VERSION}

  mqtt_container:
    depends_on:
    - ia_eisbase
    - uwc_common
    build:
      context: $PWD/../uwc/MQTT/
      dockerfile: $PWD/../uwc/MQTT/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}mqtt_container:${EIS_VERSION}
    container_name: mqtt_container
    hostname: mqtt_container
    network_mode: host
    read_only: true
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      AppName: "MQTT"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eis_no_proxy}
    user: ${EIS_UID}
    # userns_mode: host
    # secrets:
    # - ca_broker
    # - broker_cert
    # - broker_key
    security_opt:
    - no-new-privileges
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD-SHELL", "timeout --foreground 5 mosquitto_sub --cafile /run/secrets/ca_broker\
          \ -h 127.0.0.1 -p 11883 --cert /run/secrets/broker_cert --key /run/secrets/broker_key\
          \ -t '$$SYS/#' -C 1 | grep -v Error || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s
    ports:
      - 0.0.0.0:11883:11883


  mqtt-export:
    depends_on:
    - ia_eisbase
    - uwc_common
    build:
      context: $PWD/../uwc/mqtt-export/
      dockerfile: $PWD/../uwc/mqtt-export/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}mqtt-export:${EIS_VERSION}
    container_name: mqtt-export
    hostname: mqtt-export
    network_mode: host
    restart: unless-stopped
    # security_opt:
    # - no-new-privileges
    # # healthch
    # #   test: ["CMD-SHELL", "/bin/sh", "-c", "ps -C MQTT_Export >/dev/null && echo Running\
    # #       \ || echo Not running; exit 1"]
    #   interval: 60s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 0s
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    environment:
      AppName: "mqtt-export"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eis_no_proxy}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      MQTT_URL_FOR_EXPORT: "tcp://127.0.0.1:11883"
      ReadRequest: MQTT_Export_RdReq
      WriteRequest: MQTT_Export_WrReq
      ReadRequest_RT: MQTT_Export_RdReq_RT
      WriteRequest_RT: MQTT_Export_WrReq_RT
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      # general topics
      mqtt_SubReadTopic: "/+/+/+/read"
      mqtt_SubWriteTopic: "/+/+/+/write"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    user: ${EIS_UID}
    # userns_mode: host
    volumes:
    - "vol_uwc_socket:${SOCKET_DIR}"
    - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EIS_INSTALL_PATH}/container_logs/mqtt-export:/opt/intel/app/logs"
    # secrets:
    # - ca_etcd
    # - etcd_mqtt-export_cert
    # - etcd_mqtt-export_key
    # - ca_broker
    # - client_cert
    # - client_key

  # mqtt_container:
  #   depends_on:
  #   - ia_eisbase
  #   - uwc_common
  #   build:
  #     context: $PWD/../uwc/MQTT/
  #     dockerfile: $PWD/../uwc/MQTT/Dockerfile
  #     args:
  #       EIS_VERSION: ${EIS_VERSION}
  #       EIS_UID: ${EIS_UID}
  #   image: ${DOCKER_REGISTRY}mqtt_container:${EIS_VERSION}
  #   container_name: mqtt_container
  #   hostname: mqtt_container
  #   read_only: true
  #   restart: unless-stopped
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-file: "3"
  #       max-size: "10m"
  #   environment:
  #     AppName: "MQTT"
  #     DEV_MODE: ${DEV_MODE}
  #     no_proxy: ${eis_no_proxy}
  #   user: ${EIS_UID}
  #   # userns_mode: host
  #   # secrets:
  #   # - ca_broker
  #   # - broker_cert
  #   # - broker_key
  #   security_opt:
  #   - no-new-privileges
  #   ulimits:
  #     nproc: 65535
  #     nofile:
  #       soft: 20000
  #       hard: 40000
  #   healthcheck:
  #     test: ["CMD-SHELL", "timeout --foreground 5 mosquitto_sub --cafile /run/secrets/ca_broker\
  #         \ -h 127.0.0.1 -p 11883 --cert /run/secrets/broker_cert --key /run/secrets/broker_key\
  #         \ -t '$$SYS/#' -C 1 | grep -v Error || exit 1"]
  #     interval: 60s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 0s
  #   ports:
  #     - 0.0.0.0:11883:11883

  modbus-master:
    depends_on:
    - ia_eisbase
    - uwc_common
    build:
      context: $PWD/../uwc/modbus-master/
      dockerfile: $PWD/../uwc/modbus-master/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-master:${EIS_VERSION}
    container_name: modbus-master
    hostname: modbus-master
    network_mode: host
    read_only: true
    restart: unless-stopped
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    environment:
      AppName: "modbus-master"
      ETCD_HOST: ${ETCD_HOST}
      # ETCD_HOST: ${HOST_IP} to be discussed for network mode or not.
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eis_no_proxy},10.223.97.112
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      MY_APP_ID: 1
      CUTOFF_INTERVAL_PERCENTAGE: 90
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      NETWORK_TYPE: TCP
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    volumes:
    - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data:ro"
    - "vol_uwc_socket:${SOCKET_DIR}"
    - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EIS_INSTALL_PATH}/container_logs/modbus-master:/opt/intel/app/logs"
    user: ${EIS_UID}
    # userns_mode: host
    # secrets:
    # - ca_etcd
    # - etcd_root_cert
    # - etcd_root_key
    # security_opt:
    # - no-new-privileges
    # healthcheck:
    #   test: ["CMD-SHELL", "/bin/sh", "-c", "ps -C ModbusMaster >/dev/null && echo\
    #       \ Running || echo Not running; exit 1"]
    #   interval: 60s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 0s

volumes:
  vol_eis_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets

  vol_uwc_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets
  vol_etcd_keeper:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
# secrets:
#   ca_etcd:
#     file: provision/Certificates/ca/ca_certificate.pem
#   etcd_root_cert:
#     file: provision/Certificates/root/root_client_certificate.pem
#   etcd_root_key:
#     file: provision/Certificates/root/root_client_key.pem
#   etcd_mqtt-export_cert:
#     file: provision/Certificates/mqtt-export/mqtt-export_client_certificate.pem
#   etcd_mqtt-export_key:
#     file: provision/Certificates/mqtt-export/mqtt-export_client_key.pem
#   ca_broker:
#     file: provision/Certificates/ca/ca_certificate.pem
#   broker_cert:
#     file: provision/Certificates/MQTT/MQTT_client_certificate.pem
#   broker_key:
#     file: provision/Certificates/MQTT/MQTT_client_key.pem
#   etcd_modbus-master_cert:
#     file: provision/Certificates/root/root_client_certificate.pem
#   etcd_modbus-master_key:
#     file: provision/Certificates/root/root_client_key.pem
#   client_cert:
#     file: provision/Certificates/mymqttcerts/mymqttcerts_client_certificate.pem
#   client_key:
#     file: provision/Certificates/mymqttcerts/mymqttcerts_client_key.pem
#   etcd_EtcdUI_cert:
#     file: provision/Certificates/EtcdUI/EtcdUI_client_certificate.pem
#   etcd_EtcdUI_key:
#     file: provision/Certificates/EtcdUI/EtcdUI_client_key.pem
#   etcd_etcduser_cert:
#     file: provision/Certificates/root/root_client_certificate.pem
#   etcd_etcduser_key:
#     file: provision/Certificates/root/root_client_key.pem