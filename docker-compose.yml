################################################################################
# The source code contained or described herein and all documents related to
# the source code ("Material") are owned by Intel Corporation. Title to the
# Material remains with Intel Corporation.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or delivery of
# the Materials, either expressly, by implication, inducement, estoppel or otherwise.
################################################################################

version: '3.6'

services:

  #----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  # Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  #----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  # Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUi"
      DEV_MODE: ${DEV_MODE}
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_root_cert
      - etcd_root_key

 # UWC containers
 # 1. modbus-tcp-master
 # 2. modbus-rtu-master
 # 3. mqtt_container
 # 4. mqtt-export

  modbus-tcp-master:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-master:${EIS_VERSION}
    container_name: modbus-tcp-master
    hostname: modbus-tcp-master
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Modbus_TCP_Master"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      TCP_ENABLED : 1
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      MY_APP_ID: 5
      RESPONSE_TIMEOUT: 250
      INTERFRAME_DEALY: 1
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT_Export"
      SITE_LIST_FILE_NAME: "site_list.yml"
      PubTopics: "Modbus_TCP_Master_PolledData,Modbus_TCP_Master_ReadResponse,Modbus_TCP_Master_WriteResponse"
      PolledData: "Modbus_TCP_Master_PolledData"
      ReadResponse: "Modbus_TCP_Master_ReadResponse"
      WriteResponse: "Modbus_TCP_Master_WriteResponse"
      Modbus_TCP_Master_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_TCP_Master_ReadResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_TCP_Master_WriteResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      SubTopics: "MQTT_Export/MQTT_Export_ReadRequest,MQTT_Export/MQTT_Export_WriteRequest"
      ReadRequest: "MQTT_Export_ReadRequest"
      WriteRequest: "MQTT_Export_WriteRequest"
      MQTT_Export_ReadRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WriteRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data"
      - "vol_uwc_socket:${SOCKET_DIR}"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_Modbus_TCP_Master_cert
      - etcd_Modbus_TCP_Master_key

  modbus-rtu-master:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile_RTU
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-rtu-master:${EIS_VERSION}
    container_name: modbus-rtu-master
    hostname: modbus-rtu-master
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Modbus_RTU_Master"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      TCP_ENABLED : 1
      ZMQ_RECV_HWM: "1000"
      RESPONSE_TIMEOUT: 250
      INTERFRAME_DEALY: 30
      SERIAL_PORT_RETRY_INTERVAL: 1
      BAUD_RATE: 9600
      PARITY: 1
      PORT_NAME: "tty/USB0"
      STOPBIT: 1
      MY_APP_ID: 5
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT_Export"
      SITE_LIST_FILE_NAME: "site_list.yml"
      PubTopics: "Modbus_RTU_Master_PolledData,Modbus_RTU_Master_ReadResponse,Modbus_RTU_Master_WriteResponse"
      PolledData: "Modbus_RTU_Master_PolledData"
      ReadResponse: "Modbus_RTU_Master_ReadResponse"
      WriteResponse: "Modbus_RTU_Master_WriteResponse"
      Modbus_RTU_Master_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_RTU_Master_ReadResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_RTU_Master_WriteResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      SubTopics: "MQTT_Export/MQTT_Export_ReadRequest,MQTT_Export/MQTT_Export_WriteRequest"
      ReadRequest: "MQTT_Export_ReadRequest"
      WriteRequest: "MQTT_Export_WriteRequest"
      MQTT_Export_ReadRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WriteRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data"
      - "vol_uwc_socket:${SOCKET_DIR}"
    #user: ${EIS_UID}
    devices:
      - /dev:/dev
    privileged: true
    secrets:
      - ca_etcd
      - etcd_Modbus_RTU_Master_cert
      - etcd_Modbus_RTU_Master_key

  mqtt_container:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../MQTT/
      dockerfile: $PWD/../MQTT/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}mqtt_container:${EIS_VERSION}
    container_name: mqtt_container
    hostname: mqtt_container
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "MQTT"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
    user: ${EIS_UID}

  mqtt-export:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../mqtt-export/
      dockerfile: $PWD/../mqtt-export/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}mqtt-export:${EIS_VERSION}
    container_name: mqtt-export
    hostname: mqtt-export
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "MQTT_Export"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000" 
      MQTT_URL_FOR_EXPORT: "tcp://127.0.0.1:1883"
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "Modbus_TCP_Master,Modbus_RTU_Master"
      SubTopics: "Modbus_TCP_Master/Modbus_TCP_Master_PolledData,Modbus_TCP_Master/Modbus_TCP_Master_ReadResponse,Modbus_TCP_Master/Modbus_TCP_Master_WriteResponse,Modbus_RTU_Master/Modbus_RTU_Master_PolledData,Modbus_RTU_Master/Modbus_RTU_Master_ReadResponse,Modbus_RTU_Master/Modbus_RTU_Master_WriteResponse"
      PubTopics: "MQTT_Export_ReadRequest,MQTT_Export_WriteRequest"
      Modbus_TCP_Master_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_ReadRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WriteRequest_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_TCP_Master_ReadResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_TCP_Master_WriteResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_RTU_Master_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_RTU_Master_ReadResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      Modbus_RTU_Master_WriteResponse_cfg: "zmq_ipc,${SOCKET_DIR}/"
      ReadRequest: MQTT_Export_ReadRequest
      WriteRequest: MQTT_Export_WriteRequest
      mqtt_SubReadTopic: "/+/+/+/read"
      mqtt_SubWriteTopic: "/+/+/+/write"
    user: ${EIS_UID}
    volumes:
      - "vol_uwc_socket:${SOCKET_DIR}"
    secrets:
      - ca_etcd
      - etcd_MQTT_Export_cert
      - etcd_MQTT_Export_key

volumes:
  vol_uwc_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets

secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem
  etcd_Modbus_TCP_Master_cert:
    file: provision/Certificates/Modbus_TCP_Master/Modbus_TCP_Master_client_certificate.pem
  etcd_Modbus_TCP_Master_key:
    file: provision/Certificates/Modbus_TCP_Master/Modbus_TCP_Master_client_key.pem
  etcd_Modbus_RTU_Master_cert:
    file: provision/Certificates/Modbus_RTU_Master/Modbus_RTU_Master_client_certificate.pem
  etcd_Modbus_RTU_Master_key:
    file: provision/Certificates/Modbus_RTU_Master/Modbus_RTU_Master_client_key.pem
  etcd_MQTT_Export_cert:
    file: provision/Certificates/MQTT_Export/MQTT_Export_client_certificate.pem
  etcd_MQTT_Export_key:
    file: provision/Certificates/MQTT_Export/MQTT_Export_client_key.pem
