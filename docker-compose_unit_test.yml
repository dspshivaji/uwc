################################################################################
# The source code contained or described herein and all documents related to
# the source code ("Material") are owned by Intel Corporation. Title to the
# Material remains with Intel Corporation.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or delivery of
# the Materials, either expressly, by implication, inducement, estoppel or otherwise.
################################################################################

version: '3.6'

services:

  #----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  # Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
          HOST_TIME_ZONE: ${HOST_TIME_ZONE}
          ETCD_HOST: ${ETCD_HOST}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
          ETCD_HOST: ${ETCD_HOST}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  #----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

 # UWC containers
 # 1. uwc_common
 # 2. modbus-tcp-master
 # 3. modbus-rtu-master
 # 4. mqtt_container
 # 5. mqtt-export
 # 6. scada-rtu

  ## uwc_common image
  uwc_test_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../uwc_common
      dockerfile: $PWD/../uwc_common/Dockerfile.common.test
      args:
          EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}uwc_test_common:${EIS_VERSION}

  modbus-tcp-master-test:
    depends_on:
      - ia_eisbase
      - uwc_test_common
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile_UT
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        ETCD_HOST: ${ETCD_HOST}
    image: ${DOCKER_REGISTRY}modbus-master-test:${EIS_VERSION}
    container_name: modbus-tcp-master-test
    hostname: modbus-tcp-master-test
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "TCP"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/Modbus-App/Config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      ETCD_HOST: ${ETCD_HOST}
      MY_APP_ID: 1
      NETWORK_TYPE: TCP
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT_Export"
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
      PubTopics: "TCP_PolledData,TCP_PolledData_RT,TCP_RdResp,TCP_RdResp_RT,TCP_WrResp,TCP_WrResp_RT"
      SubTopics: "MQTT_Export/MQTT_Export_RdReq,MQTT_Export/MQTT_Export_RdReq_RT,MQTT_Export/MQTT_Export_WrReq,MQTT_Export/MQTT_Export_WrReq_RT"
      # non-realtime topics
      TCP_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_RdResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_WrResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      # realtime topics
      TCP_PolledData_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_RdResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_WrResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data:ro"
      - "vol_uwc_socket:${SOCKET_DIR}:z"
      - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
      - "$PWD/unit_test_reports/modbus-tcp-master:/reports/modbus-tcp-master"
    secrets:
      - ca_etcd
      - etcd_TCP_cert
      - etcd_TCP_key
      - ca_broker
      - client_cert
      - client_key

  modbus-rtu-test-master:
    depends_on:
      - ia_eisbase
      - uwc_test_common
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile_UT_RTU
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        ETCD_HOST: ${ETCD_HOST}
    image: ${DOCKER_REGISTRY}modbus-rtu-test-master:${EIS_VERSION}
    container_name: modbus-rtu-test-master
    hostname: modbus-rtu-test-master
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "RTU"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      ETCD_HOST: ${ETCD_HOST}
      Log4cppPropsFile: "/Modbus-App/Config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      SERIAL_PORT_RETRY_INTERVAL: 1
      MY_APP_ID: 2
      NETWORK_TYPE: RTU
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT_Export"
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
      PubTopics: "RTU_PolledData,RTU_RdResp,RTU_WrResp,RTU_PolledData_RT,RTU_RdResp_RT,RTU_WrResp_RT"
      SubTopics: "MQTT_Export/MQTT_Export_RdReq,MQTT_Export/MQTT_Export_WrReq,MQTT_Export/MQTT_Export_RdReq_RT,MQTT_Export/MQTT_Export_WrReq_RT"
      # non-realtime topics
      RTU_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_RdResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_WrResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      # realtime topics
      RTU_PolledData_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_RdResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_WrResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
    logging:
        driver: "json-file"
        options:
            max-file: "3"
            max-size: "10m"
    volumes:
      - "vol_uwc_socket:${SOCKET_DIR}:z"
      - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data:ro"
      - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
      - "$PWD/unit_test_reports/modbus-rtu-master:/reports/modbus-rtu-master"
    secrets:
      - ca_etcd
      - etcd_RTU_cert
      - etcd_RTU_key
      - ca_broker
      - client_cert
      - client_key
    devices:
      - /dev:/dev
    privileged: true

  mqtt_test_container:
    depends_on:
      - ia_eisbase
      - uwc_test_common
    build:
      context: $PWD/../MQTT/
      dockerfile: $PWD/../MQTT/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}mqtt_test_container:${EIS_VERSION}
    container_name: mqtt_test_container
    hostname: mqtt_test_container
    environment:
      AppName: "MQTT"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
    user: ${EIS_UID}
    # userns_mode: host
    secrets:
      - ca_broker
      - broker_cert
      - broker_key

  mqtt-export-test:
    depends_on:
      - ia_eisbase
      - uwc_test_common
    build:
      context: $PWD/../mqtt-export/
      dockerfile: $PWD/../mqtt-export/Dockerfile_UT
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        ETCD_HOST: ${ETCD_HOST}
    image: ${DOCKER_REGISTRY}mqtt-export-test:${EIS_VERSION}
    container_name: mqtt-export-test
    hostname: mqtt-export-test
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "MQTT_Export"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      ETCD_HOST: ${ETCD_HOST}
      Log4cppPropsFile: "/MQTT-Export-App/Config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000" 
      MQTT_URL_FOR_EXPORT: "ssl://mqtt_test_container:11883"
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "TCP,RTU"
      SubTopics: "TCP/TCP_PolledData,TCP/TCP_RdResp,TCP/TCP_WrResp,RTU/RTU_PolledData,RTU/RTU_RdResp,RTU/RTU_WrResp,TCP/TCP_PolledData_RT,TCP/TCP_RdResp_RT,TCP/TCP_WrResp_RT,RTU/RTU_PolledData_RT,RTU/RTU_RdResp_RT,RTU/RTU_WrResp_RT"
      PubTopics: "MQTT_Export_RdReq,MQTT_Export_WrReq,MQTT_Export_RdReq_RT,MQTT_Export_WrReq_RT"
      # non-realtime topics
      TCP_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_RdResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_WrResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_PolledData_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_RdResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_WrResp_cfg: "zmq_ipc,${SOCKET_DIR}/"
      ReadRequest: MQTT_Export_RdReq
      WriteRequest: MQTT_Export_WrReq
      # realtime topics
      TCP_PolledData_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_RdReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      MQTT_Export_WrReq_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_RdResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      TCP_WrResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_PolledData_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_RdResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      RTU_WrResp_RT_cfg: "zmq_ipc,${SOCKET_DIR}/"
      ReadRequest_RT: MQTT_Export_RdReq_RT
      WriteRequest_RT: MQTT_Export_WrReq_RT
      # general topics
      mqtt_SubReadTopic: "/+/+/+/read"
      mqtt_SubWriteTopic: "/+/+/+/write"
    volumes:
      - "vol_uwc_socket:${SOCKET_DIR}:z"
      - "$PWD/unit_test_reports/mqtt-export:/reports/mqtt-export"
      - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
    secrets:
      - ca_etcd
      - etcd_MQTT_Export_cert
      - etcd_MQTT_Export_key
      - ca_broker
      - client_cert
      - client_key

  scada-rtu-test:
    depends_on:
      - ia_eisbase
      - uwc_test_common
    build:
      context: $PWD/../scada-rtu/
      dockerfile: $PWD/../scada-rtu/Dockerfile_UT
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}scada-rtu:${EIS_VERSION}
    container_name: scada-rtu-test
    hostname: scada-rtu-test
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "SCADA-RTU-TEST"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/SCADA-RTU-APP/Config/log4cpp.properties"
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
      INTERNAL_MQTT_URL: "ssl://mqtt_test_container:11883"
      NETWORK_TYPE: "ALL"
      TOPIC_SEPARATOR: '-'
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
    logging:
        driver: "json-file"
        options:
            max-file: "3"
            max-size: "10m"
    volumes:
      - "$PWD/unit_test_reports/scada-rtu:/reports/scada-rtu"
      - "${EIS_INSTALL_PATH}/uwc_data:/opt/intel/eis/uwc_data:ro"
      - "${EIS_INSTALL_PATH}/uwc_data/common_config:${EIS_INSTALL_PATH}/uwc_data/common_config:ro"
      - "${EIS_INSTALL_PATH}/container_logs/scada-rtu:/opt/intel/app/logs"
    secrets:
      - ca_etcd
      - etcd_SCADA-RTU_cert
      - etcd_SCADA-RTU_key
      - ca_broker
      - client_cert
      - client_key

volumes:
  vol_uwc_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets
  vol_etcd_keeper:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  default:
    external:
      name: uwc_nw

secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem
  etcd_TCP_cert:
    file: provision/Certificates/TCP/TCP_client_certificate.pem
  etcd_TCP_key:
    file: provision/Certificates/TCP/TCP_client_key.pem
  etcd_RTU_cert:
    file: provision/Certificates/RTU/RTU_client_certificate.pem
  etcd_RTU_key:
    file: provision/Certificates/RTU/RTU_client_key.pem
  etcd_MQTT_Export_cert:
    file: provision/Certificates/MQTT_Export/MQTT_Export_client_certificate.pem
  etcd_MQTT_Export_key:
    file: provision/Certificates/MQTT_Export/MQTT_Export_client_key.pem
  etcd_SCADA-RTU_cert:
    file: provision/Certificates/SCADA-RTU/SCADA-RTU_client_certificate.pem
  etcd_SCADA-RTU_key:
    file: provision/Certificates/SCADA-RTU/SCADA-RTU_client_key.pem
  ca_broker:
    file: provision/Certificates/ca/ca_certificate.pem
  broker_cert:
    file: provision/Certificates/mymqttcerts/mymqttcerts_server_certificate.pem
  broker_key:
    file: provision/Certificates/mymqttcerts/mymqttcerts_server_key.pem
  client_cert:
    file: provision/Certificates/mymqttcerts/mymqttcerts_client_certificate.pem
  client_key:
    file: provision/Certificates/mymqttcerts/mymqttcerts_client_key.pem
