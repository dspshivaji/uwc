################################################################################
# The source code contained or described herein and all documents related to
# the source code ("Material") are owned by Intel Corporation. Title to the
# Material remains with Intel Corporation.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or delivery of
# the Materials, either expressly, by implication, inducement, estoppel or otherwise.
################################################################################

version: '3.6'

services:

  #----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  # Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  #----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  # Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUi"
      DEV_MODE: ${DEV_MODE}
    user: ${EIS_UID}

 # UWC containers
 # 1. modbus-tcp-master
 # 2. modbus-rtu-master
 # 3. mqtt_container
 # 4. mqtt-export

  modbus-tcp-master:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-master:${EIS_VERSION}
    container_name: modbus-tcp-master
    hostname: modbus-tcp-master
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Modbus-TCP-Master"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      TCP_ENABLED : 1
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      MY_APP_ID: 5
      MODBUS_MASTER_CONNECT_TIMEOUT: 30000
      MODBUS_MASTER_SESSION_TIMEOUT: 10
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT-Export"
      PubTopics: "PL0_flowmeter,PL0_flowmeter_response"
      PL0_flowmeter_cfg: "zmq_tcp,127.0.0.1:1115"
      PL0_flowmeter_response_cfg: "zmq_tcp,127.0.0.1:6666"
      SubTopics: "MQTT-Export/PL0_flowmeter_read"
      PL0_flowmeter_read_cfg: "zmq_tcp,127.0.0.1:1616"
      WRITE_RESPONSE_TOPIC: "PL0_flowmeter_response"
      
    user: ${EIS_UID}

  modbus-rtu-master:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../modbus-master/
      dockerfile: $PWD/../modbus-master/Dockerfile_RTU
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-rtu-master:${EIS_VERSION}
    container_name: modbus-rtu-master
    hostname: modbus-rtu-master
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Modbus-RTU-Master"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      TCP_ENABLED : 1
      ZMQ_RECV_HWM: "1000"
      MY_APP_ID: 5
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      Clients: "MQTT-Export"
      PubTopics: "PL0_iou"
      SubTopics: "MQTT-Export/PL0_iou_write"
      PL0_iou_cfg: "zmq_tcp,127.0.0.1:3115"
      PL0_iou_write_cfg: "zmq_tcp,127.0.0.1:1212"


    #user: ${EIS_UID}
    devices:
      - /dev:/dev
    privileged: true

  mqtt_container:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../MQTT/
      dockerfile: $PWD/../MQTT/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}mqtt_container:${EIS_VERSION}
    container_name: mqtt_container
    hostname: mqtt_container
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "MQTT"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
    user: ${EIS_UID}

  mqtt-export:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../mqtt-export/
      dockerfile: $PWD/../mqtt-export/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}mqtt-export:${EIS_VERSION}
    container_name: mqtt-export
    hostname: mqtt-export
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "MQTT-Export"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000" 
      MQTT_URL_FOR_EXPORT: "tcp://127.0.0.1:1883"
      CertType: "zmq"
      PROFILING_MODE: ${PROFILING_MODE}
      SubTopics: "Modbus-TCP-Master/PL0_flowmeter,Modbus-RTU-Master/PL0_iou,Modbus-TCP-Master/PL0_flowmeter_response"
      PL0_flowmeter_response_cfg: "zmq_tcp,127.0.0.1:6666"
      PubTopics: "PL0_iou_write,PL0_flowmeter_read"
      PL0_flowmeter_cfg: "zmq_tcp,127.0.0.1:1115"
      PL0_iou_cfg: "zmq_tcp,127.0.0.1:3115"
      PL0_iou_write_cfg: "zmq_tcp,127.0.0.1:1212"
      PL0_flowmeter_read_cfg: "zmq_tcp,127.0.0.1:1616"

    user: ${EIS_UID}
